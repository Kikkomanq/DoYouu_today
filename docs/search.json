[
  {
    "objectID": "do_youuu.html",
    "href": "do_youuu.html",
    "title": "DoYOuu Oct 17th",
    "section": "",
    "text": "Demonstration of a sunburst genre plot, for a given music show click here.\n\n\nCode\nimport pandas as pd\nimport plotly.express as px\n\n# Path to your CSV file\ncsv_file_path = 'output/generated.csv'\n\n# Specify the column name that contains genres\ngenre_column = 'Genres'  # Change this if your genre column has a different name\n\n# Read the CSV file using pandas\n# Assuming that the CSV has a header row\n\ndf_full = pd.read_csv(csv_file_path, encoding='utf-8')\n\n# Initialize lists to store genres and subgenres\ngenres = []\nsubgenres = []\n\n# Determine the delimiter used within the genre column\n# Common delimiters: ',', ';', '|'\n# Here, we'll try ',' first. Change to ';' or '|' if needed.\ndelimiter = ','  # Adjust this based on your CSV's format\n\n# Iterate over each row in the DataFrame\nfor index, row in df_full.iterrows():\n    genre_data = row[genre_column]\n    \n    # Skip if genre data is missing or NaN\n    if pd.isna(genre_data):\n        continue\n    \n    # Split genres and subgenres based on the delimiter\n    parts = [part.strip() for part in str(genre_data).split(delimiter)]\n    \n    \n    # Assign the first part as the main genre\n    genre = parts[0] if parts else \"Unknown\"\n    \n    # Check if there are subgenres present\n    if len(parts) &gt; 1 and any(parts[1:]):\n        # Iterate over subgenres (skip empty strings)\n        for subgenre in parts[1:]:\n            if subgenre:  # Ensure subgenre is not empty\n                genres.append(genre)\n                subgenres.append(subgenre)\n            else:\n                genres.append(genre)\n                subgenres.append(\"Unknown\")\n    else:\n        # Assign 'Unknown' as subgenre for entries without subgenres\n        genres.append(genre)\n        subgenres.append(\"Unknown\")\n\n# Create a new DataFrame with the extracted genres and subgenres\ndf_genres = pd.DataFrame({\n    \"genre\": genres,\n    \"subgenre\": subgenres\n})\n\n# Count the occurrences of each (genre, subgenre) pair\nsubgenre_counts = df_genres.groupby([\"genre\", \"subgenre\"]).size().reset_index(name=\"count\")\n\n# Convert counts to float for potential scaling\nsubgenre_counts[\"count\"] = subgenre_counts[\"count\"].astype(float)\n\n# Downscale the count of \"Unknown\" subgenres if necessary\n# This step helps in better visualizing the distribution by reducing the prominence of \"Unknown\" categories\nsubgenre_counts.loc[\n    (subgenre_counts[\"subgenre\"] == \"Unknown\"),\n    \"count\"\n] /= 3  # Adjust the divisor as needed\n\n# Optional: Round the counts to two decimal places for better readability\nsubgenre_counts[\"count\"] = subgenre_counts[\"count\"].round(2)\n\n# Define desired figure size\ndesired_width = 1000  # in pixels\ndesired_height = 600   # in pixels\n\n# Create the sunburst chart with increased size\nfig = px.sunburst(\n    subgenre_counts,\n    path=[\"genre\", \"subgenre\"],\n    values=\"count\",\n    color=\"genre\",\n    color_discrete_sequence=px.colors.qualitative.Pastel,\n    hover_data=[\"genre\", \"subgenre\", \"count\"],\n    width=desired_width,\n    height=desired_height\n)\n\n# Customize the layout\nfig.update_layout(\n    title=\"Genre and Subgenre Distribution (With Downscaled 'Unknown' Subgenres)\",\n    margin=dict(t=80, l=0, r=0, b=0)  # Adjust top margin to accommodate title\n)\n\n# Display the plot\nfig.show()\n\n\n\n\n                                                \n\n\nFigureÂ 1: Distribution of Genres on October 2nd Show"
  }
]